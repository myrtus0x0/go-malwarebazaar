package malwarebazaar

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/url"
)

// Download a sample from Malwarebazaar
// It is returned as a reader of a zipped file encrypted with AES 128 with password "infected"
// TODO: Add helper to return decryted file
func Download(ctx context.Context, sha256 string) (io.ReadCloser, error) {
	values := url.Values{}
	values.Add("sha256_hash", sha256)
	resp, err := makeRequest(ctx, "get_file", &values, "")
	if err != nil {
		return nil, err
	}

	// Note that the API returns 200 even if the file is not found or there is a bad request
	// Really it should return a 400
	// For now this will always return the ready even if there was an error
	// TODO: Read from the body then unread it to check if there was an error
	if resp.StatusCode == 200 {
		return resp.Body, nil
	}

	// There was probably an error, return it
	searchResponse := APIResponse{}
	err = json.NewDecoder(resp.Body).Decode(&searchResponse)
	if err != nil {
		return nil, err
	}

	return nil, fmt.Errorf("error from api: %s", searchResponse.QueryStatus)
}

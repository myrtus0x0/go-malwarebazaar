package malwarebazaar

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/url"

	"github.com/alexmullins/zip"
)

// Download a sample from Malwarebazaar
// It is returned as a reader of a zipped file encrypted with AES 128 with password "infected"
// You can call GetRawFile to convert this to the raw malware content
func Download(ctx context.Context, sha256 string) (io.ReadCloser, error) {
	values := url.Values{}
	values.Add("sha256_hash", sha256)
	resp, err := makeRequest(ctx, "get_file", &values, "")
	if err != nil {
		return nil, err
	}

	// Check response based on content type
	switch resp.Header.Get("Content-Type") {
	case "application/zip":
		return resp.Body, nil
	case "application/json":
		searchResponse := APIResponse{}
		err = json.NewDecoder(resp.Body).Decode(&searchResponse)
		if err != nil {
			return nil, fmt.Errorf("error demarshaling api response: %s", err)
		}
		return nil, fmt.Errorf("%s", searchResponse.QueryStatus)
	default:
		return nil, fmt.Errorf("bad response from API")
	}
}

// GetRawFile Takes an AES 128 encrypted zip file reader with password "infected" and returns the raw malware content
func GetRawFile(reader io.ReadCloser) (io.ReadCloser, error) {
	// Read all data to buffer
	allData, err := ioutil.ReadAll(reader)
	reader.Close()
	if err != nil {
		return nil, err
	}

	// Decrypt
	zipReader, err := zip.NewReader(bytes.NewReader(allData), int64(len(allData)))
	if err != nil {
		return nil, err
	}

	// The zip file should only have one file
	for _, file := range zipReader.File {
		file.SetPassword("infected")
		return file.Open()
	}

	return nil, fmt.Errorf("no files found")
}
